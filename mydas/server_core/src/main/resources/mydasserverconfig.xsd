<?xml version="1.0" encoding="UTF-8"?>
<!--
	~ Copyright 2007 Philip Jones, EMBL-European Bioinformatics Institute
	~
	~ Licensed under the Apache License, Version 2.0 (the "License");
	~ you may not use this file except in compliance with the License.
	~ You may obtain a copy of the License at
	~
	~ http://www.apache.org/licenses/LICENSE-2.0
	~
	~ Unless required by applicable law or agreed to in writing, software
	~ distributed under the License is distributed on an "AS IS" BASIS,
	~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	~ See the License for the specific language governing permissions and
	~ limitations under the License.
	~
	~
	~ For further details of the mydas project, including source code,
	~ downloads and documentation, please see:
	~
	~ http://code.google.com/p/mydas/
	~
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:element name="mydasserver">
		<xs:annotation>
			<xs:documentation>
				This is the root element of the mydasserverconfig.xml file, used to configure a Mydas server installation with one or more data sources defined.
			</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="global">
					<xs:annotation>
						<xs:documentation>
							The global element holds details of configuration common to the entire server.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="baseurl" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										The URL of the DAS server up to an including /das (e.g. http://www.ebi.ac.uk/das-srv/uniprot/das)
									</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="xs:anyURI">
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="gzipped" nillable="false">
								<xs:annotation>
									<xs:documentation>
										A boolean switch indicating if the output from the DAS server should be compressed or not.
									</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="xs:boolean">
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="slash-das-points-to-dsn" nillable="false">
								<xs:annotation>
									<xs:documentation>
										If set to true, then if the browser points to /das or /das/ then the output of the dsn command should be displayed.
										This is useful for creating a home page based upon the data source details.
									</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:simpleContent>
										<xs:extension base="xs:boolean">
										</xs:extension>
									</xs:simpleContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="default-stylesheet" type="xs:string" nillable="false">
								<xs:annotation>
									<xs:documentation>
										The name of the default DAS stylesheet to be used for all of the defined datasources. 
										This can be overridden for individual datasources by including a stylesheet element for them.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="dsn-xslt-url" type="xs:anyURI" nillable="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Gives the URI of an XSLT transformation that can be used by the browser to present the dsn command response in a human-readable format. 
										Optional - the processing instruction will only be included if this element is present.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="dna-xslt-url" type="xs:anyURI" nillable="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Gives the URI of an XSLT transformation that can be used by the browser to present the dna command response in a human-readable format. 
										Optional - the processing instruction will only be included if this element is present.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="entry-points-xslt-url" type="xs:anyURI" nillable="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Gives the URI of an XSLT transformation that can be used by the browser to present the entry-points command response in a human-readable format.
										Optional - the processing instruction will only be included if this element is present.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="sequence-xslt-url" type="xs:anyURI" nillable="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Gives the URI of an XSLT transformation that can be used by the browser to present the sequence command response in a human-readable format. 
										Optional - the processing instruction will only be included if this element is present.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="features-xslt-url" type="xs:anyURI" nillable="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Gives the URI of an XSLT transformation that can be used by the browser to present the features command response in a human-readable format. 
										Optional - the processing instruction will only be included if this element is present.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="types-xslt-url" type="xs:anyURI" nillable="false" minOccurs="0">
								<xs:annotation>
									<xs:documentation>
										Gives the URI of an XSLT transformation that can be used by the browser to present the types command response in a human-readable format. 
										Optional - the processing instruction will only be included if this element is present.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="property" type="propertyType" minOccurs="0" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>
										Any number of additional properties can be annotated on the server as a whole. 
										These name / value pairs will be available to all of the data sources defined for the server instance.
									</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="datasources">
					<xs:annotation>
						<xs:documentation>
							The enclosing element for one or more datasource definitions.
						</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="datasource" maxOccurs="unbounded" minOccurs="1">
								<xs:annotation>
									<xs:documentation>
										Configuration for a single data source. All the information annotated in this element will be available to the DataSource class.
									</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="maintainer" minOccurs="1" maxOccurs="1" nillable="false">
											<xs:annotation>
												<xs:documentation>
													The maintainer tag identifies the contact person for the source.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="email" type="xs:string" use="required">
													<xs:annotation>
														<xs:documentation>
															The email (required) attribute is a properly formatted email address.
														</xs:documentation>
													</xs:annotation>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
										<xs:element name="version" maxOccurs="unbounded" minOccurs="1">
											<xs:annotation>
												<xs:documentation>
													This tag represents one independent version of a data source. Usually there is only one VERSION per SOURCE but there may be more where, for example, the data is annotated onto a different version of an assembly. 
													This mechanism exist to allow servers to signal to clients that there is a later version of a set of data without affecting those reliant on the old set.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:sequence>
													<xs:element name="class" type="xs:string" minOccurs="1" maxOccurs="1" nillable="false">
														<xs:annotation>
															<xs:documentation>
																The fully qualified class name of the DataSource.
															</xs:documentation>
														</xs:annotation>
													</xs:element>
													<xs:element name="coordinates" minOccurs="1" maxOccurs="unbounded">
														<xs:annotation>
															<xs:documentation>
																This tag identifies a reference coordinate system  supported by the source.
															</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:simpleContent>
																<xs:extension base="xs:string">
																	<xs:attribute name="uri" type="xs:anyURI" use="required">
																		<xs:annotation>
																			<xs:documentation>
																				The uri (required) attribute is a globally unique identifier for the coordinate system. 
																				It should be a fully resolvable URL providing more information about the coordinate system.
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																	<xs:attribute name="source" type="xs:string" use="required">
																		<xs:annotation>
																			<xs:documentation>
																				The source (required) attribute is the type of reference object (e.g. "Chromosome" or "Protein Sequence").
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																	<xs:attribute name="authority" type="xs:string" use="required">
																		<xs:annotation>
																			<xs:documentation>
																				The authority (required) attribute is the project or organisation responsible for defining the coordinate system (e.g. NCBI or UniProt).
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																	<xs:attribute name="taxid" type="xs:string" use="optional">
																		<xs:annotation>
																			<xs:documentation>
																				The taxid (optional) attribute is the NCBI taxonomy ID for the species, where a coordinate system is restricted to only one species.
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																	<xs:attribute name="version" type="xs:string" use="optional">
																		<xs:annotation>
																			<xs:documentation>
																				    The version (optional) attribute is used to indicate the version of a coordinate system as a whole. 
																				    It is used to differentiate between coordinate systems that change infrequently but are fundamentally incompatible between releases. 
																				    Typically these are genomic.
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																	<xs:attribute name="test_range" type="xs:string" use="required">
																		<xs:annotation>
																			<xs:documentation>
																				    The test_range (required) attribute is an example segment that may be used to test the source's capabilities. 
																				    It should be a segment for which the source has data.
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																</xs:extension>
															</xs:simpleContent>
														</xs:complexType>
													</xs:element>
													<xs:element name="capability" minOccurs="1" maxOccurs="unbounded">
														<xs:annotation>
															<xs:documentation>
																This tag describes the commands and other capabilities supported by the data source.
															</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:simpleContent>
																<xs:extension base="xs:string">
																	<xs:attribute name="type" type="xs:string" use="required">
																		<xs:annotation>
																			<xs:documentation>
																				The type (required) attribute is a formatted string of the format: das1:capability_name
																				For example: "das1:entry_points" or "das1:feature-by-id".
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																	<xs:attribute name="query_uri" type="xs:anyURI" use="optional">
																		<xs:annotation>
																			<xs:documentation>
																				The query_uri (optional) attribute is the actual DAS URL used to execute a command. It does not apply to capabilities that are not commands (e.g. "feature-by-id").
																			</xs:documentation>
																		</xs:annotation>
																	</xs:attribute>
																</xs:extension>
															</xs:simpleContent>
														</xs:complexType>
													</xs:element>
													<xs:element name="property" type="propertyType" minOccurs="0" maxOccurs="unbounded">
														<xs:annotation>
															<xs:documentation>
																Any number of additional properties, consisting of a name and a value can be annotated for each individual data source. 
																All such properties are available to the DataSource code of course.
															</xs:documentation>
														</xs:annotation>
													</xs:element>
												</xs:sequence>
												<xs:attribute name="uri" type="xs:anyURI" use="required">
													<xs:annotation>
														<xs:documentation>
															The uri (required) attribute is a global unique identifier for this version of the data source. 
															This is the DSN (data source name) that is referred to throughout this document
														</xs:documentation>
													</xs:annotation>
												</xs:attribute>
												<xs:attribute name="created" type="xs:string" use="required">
													<xs:annotation>
														<xs:documentation>
															The created (required) attribute is the publish date.
														</xs:documentation>
													</xs:annotation>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
										<xs:element name="stylesheet" type="xs:string" minOccurs="0" maxOccurs="1" nillable="false">
											<xs:annotation>
												<xs:documentation>
													The optional name of the DAS stylesheet to be used for this datasource. 
													This will override the default stylesheet defined in the global settings section.
												</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="dna-command-enabled" minOccurs="1" maxOccurs="1" nillable="false">
											<xs:annotation>
												<xs:documentation>
													This setting indicates if the dna command is enabled or not for this data source. 
													Clearly this may be set to false for servers that serve only protein sequence and annotation. 
													Note that the mydas DAS server makes no attempt to check that a valid DNA, RNA or protein sequence is being served by the sequence command - this is the responsibility of the data source itself.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="xs:boolean">
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="features-strictly-enclosed" minOccurs="1" maxOccurs="1" nillable="false">
											<xs:annotation>
												<xs:documentation>
													If 'true' then when segment coordinates are included in the request, only features that are entirely enclosed within the coordinates are returned. 
													If 'false' then all features that overlap with the coordinates are returned. 
													Handles an ambiguity in the DAS 1.53 specification - see section "Retrieve the Annotations Across a Segment".
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="xs:boolean">
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="use-feature-id-for-feature-label" minOccurs="1" maxOccurs="1" nillable="false">
											<xs:annotation>
												<xs:documentation>
													If 'true' then if no feature label is provided by the data source, the feature id will automatically be reported as the feature label. 
													(Of course, if a feature label is provided, this will override the feature id.)
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="xs:boolean">
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="include-types-with-zero-count" minOccurs="1" maxOccurs="1" nillable="false">
											<xs:annotation>
												<xs:documentation>
													If 'true' then all of the types present in the data source will be listed by the types command even if they do not appear for the requested segment. 
													If 'false', if the types command includes 'segment' arguments, only the feature types actually annotated on the requested segments will be listed.
												</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:simpleContent>
													<xs:extension base="xs:boolean">
													</xs:extension>
												</xs:simpleContent>
											</xs:complexType>
										</xs:element>
										<xs:element name="property" type="propertyType" minOccurs="0" maxOccurs="unbounded">
											<xs:annotation>
												<xs:documentation>
													Any number of additional properties, consisting of a name and a value can be annotated for each individual data source. 
													All such properties are available to the DataSource code of course.
												</xs:documentation>
											</xs:annotation>
										</xs:element>
									</xs:sequence>
									<xs:attribute name="uri" type="xs:anyURI" use="required">
										<xs:annotation>
											<xs:documentation>
												The uri (required) attribute uniquely identifies the group of sources, and must be globally unique.
											</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="title" type="xs:string" use="required">
										<xs:annotation>
											<xs:documentation>
												The title (required) attribute is a short text label suitable for display
											</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="description" type="xs:string" use="required">
										<xs:annotation>
											<xs:documentation>
												description (required) attribute is a longer text description.
											</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="doc_href" type="xs:anyURI" use="optional">
										<xs:annotation>
											<xs:documentation>
												The doc_href (optional) attribute is a URL location where more information about the data is available. 
												The target may be any browser-readable MIME-type.
											</xs:documentation>
										</xs:annotation>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="propertyType">
		<xs:attribute name="key" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
					Properties will be made available to the DataSource developer as a java.util.Map of keys and values, with this attribute containing the key.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="value" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>
					Properties will be made available to the DataSource developer as a java.util.Map of keys and values, with this attribute containing the value.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
</xs:schema>