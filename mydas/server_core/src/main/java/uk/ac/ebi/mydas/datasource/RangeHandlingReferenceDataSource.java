/*
 * Copyright 2007 Philip Jones, EMBL-European Bioinformatics Institute
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * For further details of the mydas project, including source code,
 * downloads and documentation, please see:
 *
 * http://code.google.com/p/mydas/
 *
 */

package uk.ac.ebi.mydas.datasource;

import java.util.Collection;

import uk.ac.ebi.mydas.exceptions.BadReferenceObjectException;
import uk.ac.ebi.mydas.exceptions.CoordinateErrorException;
import uk.ac.ebi.mydas.exceptions.DataSourceException;
import uk.ac.ebi.mydas.exceptions.UnimplementedFeatureException;
import uk.ac.ebi.mydas.model.DasRestrictedAnnotatedSegment;
import uk.ac.ebi.mydas.model.DasRestrictedSequence;
import uk.ac.ebi.mydas.model.Range;

/**
 * Created Using IntelliJ IDEA.
 * Date: 04-May-2007
 * Time: 15:12:06
 *
 * @author Phil Jones, EMBL-EBI, pjones@ebi.ac.uk
 *
 * Implementing this interface will allow you to take control
 * of filtering by start / stop coordinates in your ReferenceDataSource for both the sequence
 * and the features.
 *
 * This is useful if your DAS source includes massive segments, otherwise don't bother - just implement a
 * {@link ReferenceDataSource}.
 */
public interface RangeHandlingReferenceDataSource extends ReferenceDataSource{

    /**
     * This method should be implemented to return a DasRestrictedSequence object that contains only the
     * requested coordinates of the segment and also returns the requested start and stop coordinates.
     *
     * This may be more efficient if your data source serves massive segments that you are able to efficiently
     * query by coordinates.
     * @param segmentId being the id of the requested segment. (e.g. the accession).
     * @param start being the requested start coordinate of the segment
     * @param stop being the requested stop coordinate of the segment
     * @return a DasSequence object for the reference, or null if it is not found.
     * @throws uk.ac.ebi.mydas.exceptions.BadReferenceObjectException should be thrown if the segment requested does not
     * exist in this data source.
     * @throws uk.ac.ebi.mydas.exceptions.DataSourceException to wrap any other types of exception that may be
     * generated by your data source, such as SQLExceptions or IOExceptions.
     * @throws uk.ac.ebi.mydas.exceptions.CoordinateErrorException should be thrown if the requested coordinates
     * fall outside the bounds of the requested segments.
     */
    public DasRestrictedSequence getSequence (String segmentId, int start, int stop) throws CoordinateErrorException, BadReferenceObjectException, DataSourceException;

    /**
     * Implement this method to allow you to take control
     * of filtering by start / stop coordinates in your AnnotationDataSource.
     *
     * Note that this returns a Collection of DasRestrictedAnnotatedSegment objects.  When the DAS features command
     * is called, including restrictions on the start and stop coordinates of the matching features, the
     * DasRestrictedAnnotatedSegment will just return all the features that the data source had added to it, so it
     * is the responsibility of the data source to filter these features by coordinate.
     *
     * The DAS 1.53 specification is ambiguous about how a match by coordinate is defined.  It is up to you whether matching
     * features should fall strictly within the start and stop coordinates, or whether they may merely overlap with the
     * specified region.
     *
     * Useful if your DAS source includes massive segments, otherwise don't bother - just implement a
     * ReferenceDataSource.
     * @param segmentId being the id of the requested segment. (e.g. the accession).
     * @param start being the requested start coordinate of the segment
     * @param stop being the requested stop coordinate of the segment
     * @return a DasRestrictedAnnotatedSegment, that contains only the features enclosed within the requested
     * start and end coordinates.
     * @throws BadReferenceObjectException should be thrown if the segment requested does not
     * exist in this data source.
     * @throws DataSourceException to wrap any other types of exception that may be 
     * generated by your data source, such as SQLExceptions or IOExceptions.
     * @throws uk.ac.ebi.mydas.exceptions.CoordinateErrorException
     */
    public DasRestrictedAnnotatedSegment getFeatures(String segmentId, int start, int stop,Integer maxbeans) throws CoordinateErrorException, BadReferenceObjectException, DataSourceException;



    /**
     * 
     * This method is an extension of the {@link #getFeatures(String, int, int, Integer)} to allow a customized 
     * implementation of the pagination capability. MyDas verifies if the </i>'rows-for-feature'</i> 
     * capability has been declared in the MydasServerConfig.xml file and will try to use this method. 
     * A UnimplementedFeatureException must be thrown in case this capability is not implemented in your data source.
     * 
     * @param segmentId being the id of the requested segment. (e.g. the accession).
     * @param start being the requested start coordinate of the segment
     * @param stop being the requested stop coordinate of the segment
     * @return a DasRestrictedAnnotatedSegment, that contains only the features enclosed within the requested
     * start and end coordinates.
     * @throws BadReferenceObjectException should be thrown if the segment requested does not
     * exist in this data source.
     * @throws DataSourceException to wrap any other types of exception that may be 
     * generated by your data source, such as SQLExceptions or IOExceptions.
     * @throws uk.ac.ebi.mydas.exceptions.CoordinateErrorException
     */
    public DasRestrictedAnnotatedSegment getFeatures(String segmentId, int start, int stop,Integer maxbeans,Range rows) throws CoordinateErrorException, BadReferenceObjectException, DataSourceException,UnimplementedFeatureException;


}
